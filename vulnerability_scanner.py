import requests  # Import requests for handling HTTP requests


# Function to determine if a URL is vulnerable to SQL Injection
def is_sql_injection_vulnerable(url):
    # A common SQL Injection payload used to attempt bypassing authentication or extracting data
    payload = "' OR '1'='1' -- "
    try:
        # Sending a GET request with the SQL payload added to the URL
        response = requests.get(f"{url}{payload}", timeout=10)
        # Checking if the response text contains any SQL-related error keywords
        if any(keyword in response.text.lower() for keyword in ["syntax error", "sql", "warning", "mysql"]):
            return True  # Potential vulnerability found
        return False  # No vulnerability found
    except requests.RequestException as error:
        # Handling any request exceptions, like connection errors
        print(f"Error during SQL Injection check: {error}")
        return False  # Return False in case of an error


# Function to check for XSS (Cross-Site Scripting) vulnerability
def is_xss_vulnerable(url):
    # A basic XSS payload attempting to inject a script into the webpage
    payload = "<script>alert('XSS')</script>"
    try:
        # Sending a GET request with the XSS payload added to the URL
        response = requests.get(f"{url}{payload}", timeout=10)
        # Checking if the payload is reflected in the response, which would indicate a vulnerability
        if payload in response.text:
            return True  # Potential vulnerability found
        return False  # No vulnerability found
    except requests.RequestException as error:
        # Handling any request exceptions, like connection errors
        print(f"Error during XSS check: {error}")
        return False  # Return False in case of an error


# Function to perform a basic vulnerability scan on the target URL
def perform_vulnerability_scan(url):
    print(f"Starting vulnerability scan for: {url}")

    # Checking for SQL Injection vulnerability
    if is_sql_injection_vulnerable(url):
        print("Vulnerability detected: SQL Injection")
    else:
        print("No SQL Injection vulnerability detected.")

    # Checking for XSS vulnerability
    if is_xss_vulnerable(url):
        print("Vulnerability detected: XSS")
    else:
        print("No XSS vulnerability detected.")


# Main function to handle user input and start the vulnerability scan
def main():
    # Prompting the user to input the target URL
    target_url = input("Please enter the URL to scan (e.g., http://example.com/page?param=): ")

    # Validating that the URL starts with 'http://' or 'https://'
    if not target_url.startswith(('http://', 'https://')):
        print("Error: The URL must start with 'http://' or 'https://'")
        return  # Exit if the URL is invalid

    # Running the vulnerability scan with the provided URL
    perform_vulnerability_scan(target_url)


# Script entry point
if __name__ == "__main__":
    main()  # Execute the main function when the script is run

